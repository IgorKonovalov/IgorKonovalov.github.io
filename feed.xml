<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.3.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-09-03T13:02:08+03:00</updated><id>/</id><title type="html">Igor Konovalov</title><subtitle>Russia, Saint Petersburg. Passionate WebDeveloper. Core skills - HTML, CSS, Javascript, Node JS. Personal blog and portfolio.</subtitle><entry><title type="html">Mathematical Rose Revisited</title><link href="/projects/2017/09/03/Maurer_Rose_revisited.html" rel="alternate" type="text/html" title="Mathematical Rose Revisited" /><published>2017-09-03T12:35:55+03:00</published><updated>2017-09-03T12:35:55+03:00</updated><id>/projects/2017/09/03/Maurer_Rose_revisited</id><content type="html" xml:base="/projects/2017/09/03/Maurer_Rose_revisited.html">&lt;p&gt;A new and improved version of Mathematical Rose Generator now &lt;a href=&quot;https://codepen.io/Igor_Konovalov/full/ZJwPQv/&quot;&gt;awailable here:&lt;/a&gt;
I added some new features, nice editor and it’s now possible to save rose as png.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/Igor_Konovalov/full/ZJwPQv/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/assets/IMG/Maurer_Rose_revisited/codepen_preview.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/IgorKonovalov/Maurer_Rose&quot;&gt;Source Code&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">A new and improved version of Mathematical Rose Generator now awailable here: I added some new features, nice editor and it’s now possible to save rose as png.</summary></entry><entry><title type="html">Mathematical Rose Walker</title><link href="/projects/2017/03/24/Maurer_rose_revisited.html" rel="alternate" type="text/html" title="Mathematical Rose Walker" /><published>2017-03-24T16:35:55+03:00</published><updated>2017-03-24T16:35:55+03:00</updated><id>/projects/2017/03/24/Maurer_rose_revisited</id><content type="html" xml:base="/projects/2017/03/24/Maurer_rose_revisited.html">&lt;p&gt;This is a simple walker, reflecting given path. The path is mathematical rose - you can read about it in &lt;a href=&quot;https://en.wikipedia.org/wiki/Rose_(mathematics)&quot;&gt;wikipedia&lt;/a&gt; and have a look into another small project I did with this shapes &lt;a href=&quot;https://igorkonovalov.github.io/projects/2017/02/14/Maurer_rose.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Project inspired by &lt;a href=&quot;https://twitter.com/beesandbombs&quot;&gt;@beesandbombs&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/shiffman&quot;&gt;@shiffman&lt;/a&gt; - take a look at them - they are both amazing!&lt;/p&gt;

&lt;h1&gt;Press Start!&lt;/h1&gt;

&lt;style&gt;
  @media screen and (max-width: 600px) {
    canvas {
      width: 340px;
      }
  }
&lt;/style&gt;

&lt;p&gt;&lt;span&gt;Number of petals: &lt;input type=&quot;text&quot; name=&quot;&quot; value=&quot;3&quot; id=&quot;n&quot; /&gt;&lt;/span&gt;
&lt;button id=&quot;start&quot;&gt;START&lt;/button&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;canvas id=&quot;canvas&quot; width=&quot;740&quot; height=&quot;740&quot; style=&quot;background-color: black&quot;&gt;&lt;/canvas&gt;
&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/IgorKonovalov/Little_projects/tree/master/Maurer_Rose_Walker&quot;&gt;Source code&lt;/a&gt;&lt;/p&gt;

&lt;script src=&quot;/assets/JS/Maurer_rose_revisited/index.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">This is a simple walker, reflecting given path. The path is mathematical rose - you can read about it in wikipedia and have a look into another small project I did with this shapes here</summary></entry><entry><title type="html">Islamic Star Patterns in SVG</title><link href="/projects/2017/03/08/Islamic_Star_Patterns_SVG.html" rel="alternate" type="text/html" title="Islamic Star Patterns in SVG" /><published>2017-03-08T12:20:55+03:00</published><updated>2017-03-08T12:20:55+03:00</updated><id>/projects/2017/03/08/Islamic_Star_Patterns_SVG</id><content type="html" xml:base="/projects/2017/03/08/Islamic_Star_Patterns_SVG.html">&lt;p&gt;This is a little project I made under influence of another David Shiffman’s &lt;a href=&quot;https://www.youtube.com/watch?v=sJ6pMLp_IaI&quot;&gt;video&lt;/a&gt;. The implementation I found rather intriguing and interesting to redo in SVG. Here is my attempt - I’ve used a code in &lt;a href=&quot;https://github.com/CodingTrain&quot;&gt;Coding Train&lt;/a&gt; repo for &lt;a href=&quot;https://github.com/CodingTrain/StarPatterns&quot;&gt;Islamic Star Patterns&lt;/a&gt; and completely rewrite it for vanilla Javascript and rendering in SVG. This project really helped me to understand OOP paradigm in JS, and helped a lot in the next project (You’ll see it very soon), and to understand how SVG animation working.&lt;/p&gt;

&lt;p&gt;If you have any suggestions - please write me on &lt;a href=&quot;https://twitter.com/igor_dlinni&quot;&gt;twitter&lt;/a&gt;. All code is available on my &lt;a href=&quot;https://github.com/IgorKonovalov/Islamic_Star_Patterns_SVG&quot;&gt;Github&lt;/a&gt; - this time I decided that this project is big enough for separate repository - feel free to make issue/PR/fork/etc.. There is a lot improve - another objects (triangles, etc), customization through CSS and so on.&lt;/p&gt;

&lt;p&gt;Interesting part of this project is implementing standard P5.JS Vector objects - The best way to understand something for me is rewriting it. I needed a lot of vector methods for making this thing work. Here is rotating function, for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rotate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And many more - take a look at &lt;a href=&quot;https://github.com/IgorKonovalov/Islamic_Star_Patterns_SVG&quot;&gt;repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So enjoy, experiment and share your thoughts!&lt;/p&gt;

&lt;h1&gt;Islamic Star Patterns in SVG&lt;/h1&gt;
&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;controls&quot;&gt;
    &lt;span&gt;DELTA: &lt;/span&gt;&lt;input type=&quot;range&quot; id=&quot;delta&quot; name=&quot;&quot; value=&quot;10&quot; min=&quot;0&quot; max=&quot;50&quot; step=&quot;1&quot; /&gt;
    &lt;span&gt;ANGLE: &lt;/span&gt;&lt;input type=&quot;range&quot; id=&quot;angle&quot; name=&quot;&quot; value=&quot;30&quot; min=&quot;0&quot; max=&quot;90&quot; step=&quot;1&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;controls&quot;&gt;
    &lt;span&gt;deltainc: &lt;/span&gt;&lt;input type=&quot;range&quot; id=&quot;deltaInc&quot; name=&quot;&quot; value=&quot;0&quot; min=&quot;-0.5&quot; max=&quot;0.5&quot; step=&quot;0.01&quot; /&gt;
    &lt;span&gt;angleinc: &lt;/span&gt;&lt;input type=&quot;range&quot; id=&quot;angleInc&quot; name=&quot;&quot; value=&quot;0&quot; min=&quot;-1&quot; max=&quot;1&quot; step=&quot;0.01&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div id=&quot;svgContainer&quot;&gt;&lt;/div&gt;
&lt;p&gt;&lt;select class=&quot;&quot; id=&quot;tiling&quot;&gt;
  &lt;option value=&quot;square&quot;&gt;Square&lt;/option&gt;
  &lt;option value=&quot;hex&quot;&gt;Hexagon&lt;/option&gt;
&lt;/select&gt;&lt;/p&gt;

&lt;script src=&quot;/assets/JS/Islamic_Star_Patterns_SVG/main.js&quot;&gt;&lt;/script&gt;

&lt;style&gt;
* {
    box-sizing: border-box;
  }

  .container {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-direction: column;
        flex-direction: column;
    width: 700px;
  }
  .controls {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-pack: justify;
    justify-content: space-between;
  }

  .controls span {
    width: 170px;
    display: -ms-flexbox;
    display: flex;
  }

  .controls input{
    width: 100%;
    margin-right: 5px;
  }
  .tile polygon {
      pointer-events: visiblePainted;
      fill: hsla(279, 100%, 5%, 1);
      stroke: hsla(0, 100%, 100%, 1);
      stroke-width: .3;

  }

  .tile line {
    stroke: hsla(0, 100%, 100%, 1);
    stroke-width: 5;
    stroke-linecap: round;
    stroke-dasharray: 0;
  }
&lt;/style&gt;</content><author><name></name></author><summary type="html">This is a little project I made under influence of another David Shiffman’s video. The implementation I found rather intriguing and interesting to redo in SVG. Here is my attempt - I’ve used a code in Coding Train repo for Islamic Star Patterns and completely rewrite it for vanilla Javascript and rendering in SVG. This project really helped me to understand OOP paradigm in JS, and helped a lot in the next project (You’ll see it very soon), and to understand how SVG animation working.</summary></entry><entry><title type="html">Maurer Rose</title><link href="/projects/2017/02/14/Maurer_rose.html" rel="alternate" type="text/html" title="Maurer Rose" /><published>2017-02-14T20:35:55+03:00</published><updated>2017-02-14T20:35:55+03:00</updated><id>/projects/2017/02/14/Maurer_rose</id><content type="html" xml:base="/projects/2017/02/14/Maurer_rose.html">&lt;p&gt;Mathematics can be very beautiful. Below is javascript implementation of mathematical rose - (rhodonea curve is a sinusoid plotted in polar coordinates) with Maurer rose (consists of some lines that connect some points on a rose curve).
Formulas is relatively simple, and can be found in wikipedia pages: &lt;a href=&quot;https://en.wikipedia.org/wiki/Rose_(mathematics)&quot;&gt;Mathematical Rose&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Maurer_rose&quot;&gt;Maurer rose&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Good place to start for you to experiments with rose is this chart:&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Mathematical “rose” or “rhodonea” curves, based on the polar-coordinates equation r=cos(θ*n/d). In this chart, the values of parameter n varies from 1 to 7, while d varies from 1 to 9.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/JS/Maurer_rose/Rose-rhodonea-curve-7x9-chart-improved.svg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Rose itself is red and “Maurer” part is blue. A Maurer rose of the rose r = sin(nθ) consists of the 360 lines successively connecting the above 361 points. Thus a Maurer rose is a polygonal curve with vertices on a rose. “maurer” parameter defines an angle between start of walk (first line) and next step (next line). The first line starts at coordinates (0,0) and there the final line ends.&lt;/p&gt;

&lt;p&gt;Experiments with rose and her Maurer part can be very interesting.&lt;/p&gt;

&lt;p&gt;I suggest for you to try: 
[n: 0.01, d: 8.16, maurer: 21],
[n: 2, d: 1, maurer: 71],
[n: 2, d: 5, maurer: 56],
[n: 7, d: 1, maurer: 29],
[n: 5, d: 2, maurer: 66], and so on&lt;/p&gt;

&lt;p&gt;NB! &lt;a href=&quot;https://codepen.io/Igor_Konovalov/full/ZJwPQv/&quot;&gt;New and all inproved version&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Possibilities are infinite, have fun! Source code - on my &lt;a href=&quot;https://github.com/IgorKonovalov/Little_projects/tree/master/Maurer_Rose&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Happy Valentine's!&lt;/h2&gt;

&lt;canvas id=&quot;rose&quot; width=&quot;600&quot; height=&quot;600&quot; style=&quot;background-color: black&quot;&gt;&lt;/canvas&gt;
&lt;p&gt;&lt;br /&gt;
Select n: &lt;input type=&quot;text&quot; name=&quot;&quot; value=&quot;20&quot; id=&quot;n&quot; /&gt;
Select d: &lt;input type=&quot;text&quot; name=&quot;&quot; value=&quot;2&quot; id=&quot;d&quot; /&gt;
Select maurer: &lt;input type=&quot;text&quot; name=&quot;&quot; value=&quot;71&quot; id=&quot;maurer&quot; /&gt;
&lt;button id=&quot;generate&quot; class=&quot;button-primary&quot;&gt;Generate&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;input type=&quot;checkbox&quot; id=&quot;showRose&quot; checked=&quot;&quot; /&gt; Show rose
&lt;input type=&quot;checkbox&quot; id=&quot;showMaurer&quot; checked=&quot;&quot; /&gt; Show Maurer lines&lt;/p&gt;
&lt;div class=&quot;flexContainer&quot;&gt;
  &lt;div class=&quot;spans&quot;&gt;
    &lt;span&gt;Select n: &lt;/span&gt;
    &lt;span&gt;Select d: &lt;/span&gt;
    &lt;span&gt;Select maurer: &lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&quot;inputs&quot;&gt;
    &lt;input type=&quot;range&quot; id=&quot;rangeN&quot; name=&quot;&quot; value=&quot;20&quot; min=&quot;0&quot; max=&quot;20&quot; step=&quot;0.1&quot; /&gt;
    &lt;input type=&quot;range&quot; id=&quot;rangeD&quot; name=&quot;&quot; value=&quot;2&quot; min=&quot;0&quot; max=&quot;30&quot; step=&quot;0.1&quot; /&gt;
    &lt;input type=&quot;range&quot; id=&quot;rangeMaurer&quot; name=&quot;&quot; value=&quot;71&quot; min=&quot;0&quot; max=&quot;360&quot; step=&quot;1&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;spansValue&quot;&gt;
    &lt;span id=&quot;rangeNValue&quot;&gt;&lt;/span&gt;
    &lt;span id=&quot;rangeDValue&quot;&gt;&lt;/span&gt;
    &lt;span id=&quot;rangeMaurerValue&quot;&gt;&lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;script src=&quot;/assets/JS/Maurer_rose/main.min.js&quot;&gt;&lt;/script&gt;

&lt;style&gt;
 button {
   margin-top: -3px;
   margin-left: 10px;
 }
  span {
    margin-top: 2px;
    margin-left:5px;
  }
  input[type=&quot;text&quot;] {
    width: 50px;
  }
  .flexContainer {
    max-width: 740px;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-direction: row;
        flex-direction: row;
    -ms-flex-pack: justify;
        justify-content: space-between;
    -ms-flex-align: center;
        align-items: center;
  }
  .spans,
  .inputs,
  .spansValue {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-direction: column;
        flex-direction: column;
  }
  .spansValue {
    min-width: 10%;
  }
  .inputs {
    min-width: 70%;
  }
  input[type=&quot;range&quot;] {
    width: 100%;
  }
  @media screen and (max-width: 600px) {
    canvas {
      width: 340px;
      }
  }
&lt;/style&gt;</content><author><name></name></author><summary type="html">Mathematics can be very beautiful. Below is javascript implementation of mathematical rose - (rhodonea curve is a sinusoid plotted in polar coordinates) with Maurer rose (consists of some lines that connect some points on a rose curve). Formulas is relatively simple, and can be found in wikipedia pages: Mathematical Rose and Maurer rose.</summary></entry><entry><title type="html">Random Lines in SVG Shapes</title><link href="/projects/2017/02/10/Random_lines_in_shapes.html" rel="alternate" type="text/html" title="Random Lines in SVG Shapes" /><published>2017-02-10T19:36:55+03:00</published><updated>2017-02-10T19:36:55+03:00</updated><id>/projects/2017/02/10/Random_lines_in_shapes</id><content type="html" xml:base="/projects/2017/02/10/Random_lines_in_shapes.html">&lt;p&gt;I came to this small project after watching &lt;a href=&quot;https://www.youtube.com/watch?v=sJ6pMLp_IaI&quot;&gt;video&lt;/a&gt; by Daniel Shiffman&lt;/p&gt;

&lt;p&gt;I haven’t made a full version of star patterns yet, before finishing I found this interesting pattern:
draw a shape (hexagon, scuare or triangle), then find a random point in each edge of figure, and draw a random lines between this random points. Sometimes you can get an interesting results with this simple rules. Try it and save the result with download button!&lt;/p&gt;
&lt;style&gt;
  .tile polygon {
    pointer-events: visiblePainted;
    stroke-width: 1.5;
  }

  .tile line {
  stroke-width: 1.5;
  }

  .displaynone {
  display: none;
  }
  input[type=&quot;text&quot;] {
    width: 60px;
  }
&lt;/style&gt;

&lt;h1&gt;Figures&lt;/h1&gt;
&lt;p&gt;Set SVG width:
&lt;input type=&quot;text&quot; id=&quot;svgWidth&quot; name=&quot;&quot; value=&quot;740&quot; /&gt;
Set SVG height:
&lt;input type=&quot;text&quot; id=&quot;svgHeight&quot; value=&quot;340&quot; /&gt;
&lt;br /&gt;
Set number of lines (multiply by number of edges):
&lt;input type=&quot;text&quot; id=&quot;lines&quot; value=&quot;1&quot; /&gt;
&lt;br /&gt;
Set figure background color:
&lt;input type=&quot;color&quot; id=&quot;bgColor&quot; name=&quot;background&quot; value=&quot;#EDEDED&quot; /&gt;
Set line color:
&lt;input type=&quot;color&quot; id=&quot;lineColor&quot; value=&quot;#101010&quot; /&gt;
&lt;br /&gt;
Figure:
&lt;select id=&quot;figure_select&quot;&gt;
  &lt;option value=&quot;HEX&quot;&gt;Hex&lt;/option&gt;
  &lt;option value=&quot;Triangle&quot;&gt;Triangle&lt;/option&gt;
  &lt;option value=&quot;Square&quot;&gt;Square&lt;/option&gt;
&lt;/select&gt;
Add size (from center to corner):
&lt;input type=&quot;text&quot; id=&quot;sizeValue&quot; name=&quot;&quot; value=&quot;60&quot; /&gt;
Offset:
&lt;input type=&quot;text&quot; id=&quot;offsetValue&quot; name=&quot;&quot; value=&quot;5&quot; /&gt;
&lt;br /&gt;
&lt;button type=&quot;button&quot; class=&quot;button-primary&quot; name=&quot;generate&quot; id=&quot;generate&quot;&gt;Generate Sprite&lt;/button&gt;&lt;/p&gt;
&lt;div id=&quot;Figure&quot;&gt;&lt;/div&gt;
&lt;p&gt;&lt;button id=&quot;download&quot;&gt;Download SVG&lt;/button&gt;&lt;/p&gt;

&lt;script src=&quot;/assets/JS/Random_Lines_In_Shape/main.min.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">I came to this small project after watching video by Daniel Shiffman</summary></entry><entry><title type="html">Random walker with vector object (Lévy flight)</title><link href="/projects/2017/02/01/Random_walker_vector.html" rel="alternate" type="text/html" title="Random walker with vector object (Lévy flight)" /><published>2017-02-01T22:47:55+03:00</published><updated>2017-02-01T22:47:55+03:00</updated><id>/projects/2017/02/01/Random_walker_vector</id><content type="html" xml:base="/projects/2017/02/01/Random_walker_vector.html">&lt;p&gt;Hey everyone! After yesterday attempt to code random walker, I thought it would be a good idea to implement almost same thing but with vector object. As far as I know it’s common practice to use vectors to describe coordinates and speed of objects - and it turns to be a good idea in this little do-it-after-came-back-from-work project. Previous version of random walker is &lt;a href=&quot;https://IgorKonovalov.github.io/projects/2017/01/31/Simple_Random_walker.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take a look at it first, some explanation below:&lt;/p&gt;
&lt;canvas width=&quot;740px&quot; height=&quot;600px&quot; style=&quot;background-color: black&quot;&gt;&lt;/canvas&gt;
&lt;p&gt;&lt;button id=&quot;stopB&quot; class=&quot;button-primary&quot;&gt;Stop&lt;/button&gt;
&lt;script src=&quot;/assets/JS/Random_Walker_2/index.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;style&gt;
  @media screen and (max-width: 600px) {
    canvas {
      width: 340px;
      }
  }
&lt;/style&gt;

&lt;p&gt;Code for vector object is pretty simple - it describes coordinates on canvas:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I also needed some sort of random vector with set length - to describe next step of walker:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomSign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomSign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After that, I only needed to put start of line on previous point (initial vector), than plus random vector to it and draw a line. Super simple.
Full code - on my &lt;a href=&quot;https://github.com/IgorKonovalov/Little_projects/tree/master/Random_walker&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Hey everyone! After yesterday attempt to code random walker, I thought it would be a good idea to implement almost same thing but with vector object. As far as I know it’s common practice to use vectors to describe coordinates and speed of objects - and it turns to be a good idea in this little do-it-after-came-back-from-work project. Previous version of random walker is here</summary></entry><entry><title type="html">Simple Random Walker</title><link href="/projects/2017/01/31/Simple_Random_walker.html" rel="alternate" type="text/html" title="Simple Random Walker" /><published>2017-01-31T22:35:55+03:00</published><updated>2017-01-31T22:35:55+03:00</updated><id>/projects/2017/01/31/Simple_Random_walker</id><content type="html" xml:base="/projects/2017/01/31/Simple_Random_walker.html">&lt;p&gt;Just a very simple implementation of random walker on canvas in pure JS.&lt;/p&gt;

&lt;p&gt;Inspired by magnificent Daniel Shiffman - &lt;a href=&quot;https://www.youtube.com/watch?v=l__fEY1xanY&quot;&gt;take a look at this video&lt;/a&gt;&lt;/p&gt;

&lt;canvas width=&quot;780px&quot; height=&quot;600px&quot; style=&quot;background-color: black&quot;&gt;&lt;/canvas&gt;
&lt;script src=&quot;/assets/JS/Random_Walker_1/index.js&quot;&gt;&lt;/script&gt;

&lt;style&gt;
  @media screen and (max-width: 600px) {
    canvas {
      width: 340px;
      }
  }
&lt;/style&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/IgorKonovalov/Little_projects/tree/master/Random_walker&quot;&gt;Source code&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Just a very simple implementation of random walker on canvas in pure JS.</summary></entry><entry><title type="html">Elementary Cellular Automaton</title><link href="/projects/2017/01/20/Cellular_Automation.html" rel="alternate" type="text/html" title="Elementary Cellular Automaton" /><published>2017-01-20T19:36:55+03:00</published><updated>2017-01-20T19:36:55+03:00</updated><id>/projects/2017/01/20/Cellular_Automation</id><content type="html" xml:base="/projects/2017/01/20/Cellular_Automation.html">&lt;p&gt;While working on &lt;a href=&quot;https://igorkonovalov.github.io/projects/2017/01/04/Game_of_life.html&quot;&gt;Game Of Life&lt;/a&gt; - I’ve became interested in Cellular Automation, and found another interesting example to do - Elementary cellular automaton. According to &lt;a href=&quot;https://en.wikipedia.org/wiki/Elementary_cellular_automaton&quot;&gt;Wikipedia&lt;/a&gt;, “… an elementary cellular automaton is a one-dimensional cellular automaton where there are two possible states (labeled 0 and 1) and the rule to determine the state of a cell in the next generation depends only on the current state of the cell and its two immediate neighbors.” It was  Super simple, right? But it was well challenging for me as for a novice programmer, and also lead to some new knowledge and understanding of what’s going on. It’s 255 different rules instead of three in Game Of Life, but they do not implement simultaniously, one rule per one automata. There is a big list of all the rules can be found &lt;a href=&quot;http://atlas.wolfram.com/01/01/&quot;&gt;here&lt;/a&gt;. The most interesting ones I used in my project. Also, this automata is kind of boring and I added some colour fun. So, take a look!&lt;/p&gt;

&lt;p&gt;Source code, as always on my github: &lt;a href=&quot;https://github.com/IgorKonovalov/Little_projects/tree/master/Cellular_Automata&quot;&gt;SOURCE&lt;/a&gt;&lt;/p&gt;

&lt;style&gt;
  button {
    float: right;
    margin-left: 3px;
    font-size: 14px;
  }
  canvas {
    margin-bottom: 10px;
  }
  select {
    min-width: 120px;
  }
  .wrapper {
    width: 740px;
  }
  #selectFirstRow {
    margin-right: 5px;
  }
&lt;/style&gt;

&lt;script src=&quot;/assets/JS/Cellular_automation/rules.js&quot;&gt;&lt;/script&gt;

&lt;canvas id=&quot;automata&quot; width=&quot;740px&quot; height=&quot;600px&quot; style=&quot;background-color: black&quot;&gt;&lt;/canvas&gt;
&lt;p&gt;Select rule:
  &lt;select id=&quot;selectRule&quot;&gt;
  &lt;/select&gt;
  Select first row:
  &lt;select id=&quot;selectFirstRow&quot;&gt;
  &lt;/select&gt;
  &lt;button id=&quot;clear&quot;&gt;Clear&lt;/button&gt;
  &lt;button id=&quot;startPause&quot; class=&quot;button-primary&quot;&gt;Start&lt;/button&gt;
  &lt;br /&gt;
  &lt;br /&gt;
  Select cell color:
  &lt;input type=&quot;color&quot; id=&quot;cellColor&quot; value=&quot;#ffffff&quot; /&gt;
  Select canvas color:
  &lt;input type=&quot;color&quot; id=&quot;canvasColor&quot; /&gt;
  Psychedelic mode:
  &lt;input type=&quot;checkbox&quot; id=&quot;psychedelic&quot; value=&quot;on&quot; /&gt;ON&lt;br /&gt;&lt;/p&gt;

&lt;script src=&quot;/assets/JS/Cellular_automation/index.js&quot;&gt;&lt;/script&gt;</content><author><name></name></author><summary type="html">While working on Game Of Life - I’ve became interested in Cellular Automation, and found another interesting example to do - Elementary cellular automaton. According to Wikipedia, “… an elementary cellular automaton is a one-dimensional cellular automaton where there are two possible states (labeled 0 and 1) and the rule to determine the state of a cell in the next generation depends only on the current state of the cell and its two immediate neighbors.” It was Super simple, right? But it was well challenging for me as for a novice programmer, and also lead to some new knowledge and understanding of what’s going on. It’s 255 different rules instead of three in Game Of Life, but they do not implement simultaniously, one rule per one automata. There is a big list of all the rules can be found here. The most interesting ones I used in my project. Also, this automata is kind of boring and I added some colour fun. So, take a look!</summary></entry><entry><title type="html">Game Of Life!</title><link href="/projects/2017/01/04/Game_of_life.html" rel="alternate" type="text/html" title="Game Of Life!" /><published>2017-01-04T17:36:55+03:00</published><updated>2017-01-04T17:36:55+03:00</updated><id>/projects/2017/01/04/Game_of_life</id><content type="html" xml:base="/projects/2017/01/04/Game_of_life.html">&lt;p&gt;For a little while I’ve been working on a first real (at least for me) project - an implementation of &lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&quot;&gt;Conway’s Game of Life&lt;/a&gt; in Javascript. It was one of the exercises in excellent book &lt;a href=&quot;http://eloquentjavascript.net/&quot;&gt;Eloquent Javascript&lt;/a&gt; and first one that actually made me really interested in programming process itself.
For couple of days I wasn’t eating and sleeping and just programming this thing and thinking about it. And when it was actually done - that was really amazing. I haven’t felt myself like this since childhood. Good start of the year! So, the source for the game &lt;a href=&quot;https://github.com/IgorKonovalov/Little_projects/tree/master/Game_of_Life&quot;&gt;can be found on my Github&lt;/a&gt;, and you can play it right below! The usage is very basic, but I’m sure that I will continue to contribute to the project to make it more user-friendly and nice.&lt;/p&gt;

&lt;p&gt;Click on Randomize button, then Start, relax and watch magic.&lt;/p&gt;

&lt;canvas id=&quot;game&quot; width=&quot;740px&quot; height=&quot;600px&quot; style=&quot;background-color: lightgray&quot;&gt;&lt;/canvas&gt;
&lt;p&gt;&lt;br /&gt;
&lt;button id=&quot;random&quot; style=&quot;margin-left: 0px;&quot;&gt;Randomize&lt;/button&gt;
&lt;button id=&quot;step&quot; style=&quot;margin-left: 0px;&quot;&gt;Next Step&lt;/button&gt;
&lt;span&gt;Speed: &lt;/span&gt;
&lt;input type=&quot;text&quot; id=&quot;speed&quot; value=&quot;10&quot; /&gt;
&lt;button id=&quot;start&quot; class=&quot;button-primary&quot;&gt;Start&lt;/button&gt;
&lt;button id=&quot;pause&quot;&gt;Pause&lt;/button&gt;
&lt;button id=&quot;clear&quot;&gt;Clear&lt;/button&gt;
&lt;script src=&quot;/assets/JS/Game_of_Life/index.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;There is a lot written about this particular game - start from &lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&quot;&gt;wikipedia&lt;/a&gt; and move on.
I suggest you try a few patterns (refresh page, click on canvas to change color, then start):&lt;/p&gt;

&lt;p&gt;DieHard:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/IMG/Game_of_Life/Game Of Life! - DieHard.png&quot; alt=&quot;DieHard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pentadecathlon:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/IMG/Game_of_Life/Game Of Life! - Pentadecathlon.png&quot; alt=&quot;Pentadecathlon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pulsar:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/IMG/Game_of_Life/Game Of Life! - pulsar.png&quot; alt=&quot;Pulsar&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Infinite:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/IMG/Game_of_Life/Game Of Life! - infinite.png&quot; alt=&quot;infinite&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;</content><author><name></name></author><summary type="html">For a little while I’ve been working on a first real (at least for me) project - an implementation of Conway’s Game of Life in Javascript. It was one of the exercises in excellent book Eloquent Javascript and first one that actually made me really interested in programming process itself. For couple of days I wasn’t eating and sleeping and just programming this thing and thinking about it. And when it was actually done - that was really amazing. I haven’t felt myself like this since childhood. Good start of the year! So, the source for the game can be found on my Github, and you can play it right below! The usage is very basic, but I’m sure that I will continue to contribute to the project to make it more user-friendly and nice.</summary></entry><entry><title type="html">Hello World!</title><link href="/personal/2016/12/31/first_post.html" rel="alternate" type="text/html" title="Hello World!" /><published>2016-12-31T17:26:55+03:00</published><updated>2016-12-31T17:26:55+03:00</updated><id>/personal/2016/12/31/first_post</id><content type="html" xml:base="/personal/2016/12/31/first_post.html">&lt;p&gt;Hi everybody!
Partially as a little challenge to myself, partially for expiriense in English writing (I’m a native Russian) I started a blog today.
I will be using &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; for static blog, and &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub&lt;/a&gt; for hosting. The markdown syntax is totally new to me, so as english writing so many mistakes is on its way!
Soon I’ll add &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt; for comments, and first little project is coming.&lt;/p&gt;

&lt;p&gt;Happy New Year!!!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name></name></author><summary type="html">Hi everybody! Partially as a little challenge to myself, partially for expiriense in English writing (I’m a native Russian) I started a blog today. I will be using Jekyll for static blog, and GitHub for hosting. The markdown syntax is totally new to me, so as english writing so many mistakes is on its way! Soon I’ll add Disqus for comments, and first little project is coming.</summary></entry></feed>